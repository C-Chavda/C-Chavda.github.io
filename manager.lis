     1                                  ; *******************************************************************************************************************************
     2                                  ; Program name: "Arrays of Floating Point Numbers". This program takes user inputs of floating point numbers and places them into an array.
     3                                  ; Copyright (C) 2025  Chandresh Chavda                                                                                             *
     4                                  ;                                                                                                                               *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program. If not, see                       *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ; *******************************************************************************************************************************
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    14                                  ; Author information
    15                                  ;   Author name: Chandresh Chavda
    16                                  ;   Author email: chav349@csu.fullerton.edu
    17                                  ;   CWID: 885158899
    18                                  ;   Class: 240-11 Section 11
    19                                  ;
    20                                  ; Program information
    21                                  ;   Program name: Arrays of Floating Point Numbers
    22                                  ;   Programming language: X86-64 Assembly
    23                                  ;   Date program began: 2025-Feb-22
    24                                  ;   Date of last update: 2025-Feb-22
    25                                  ;   Files in this program: main.c, manager.asm, input_array.asm, output_array.asm, sum.asm, sort.asm, swap.asm, isfloat.asm, run.sh.
    26                                  ;   Testing: Alpha testing completed. All functions are correct.
    27                                  ;   Status: Ready for release to customers
    28                                  ;
    29                                  ; Purpose
    30                                  ;   This program calculates the sum and mean of an array of floating point numbers and sorts the array.
    31                                  ;   The manager.asm file contains the core logic for controlling the flow of the program and managing various operations (like input, output, sum, etc.).
    32                                  ;
    33                                  ; This file:
    34                                  ;   File name: manager.asm
    35                                  ;   Language: X86-64 Assembly
    36                                  ;   Max page width: 124 columns
    37                                  ;   Assemble (standard): nasm -f elf64 -l manager.lis -o manager.o manager.asm
    38                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l manager.lis -o manager.o manager.asm
    39                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    40                                  ;   Prototype of this function: extern double manager();
    41                                  ;
    42                                  ; Notes:
    43                                  ;   This file contains the assembly module for the "Arrays of Floating Point Numbers" program.
    44                                  ;   The manager function coordinates the execution of the entire program, orchestrating input, calculation, and output.
    45                                  ;
    46                                  ;===== Begin code area ==========================================================================================================
    47                                  
    48                                  ;declarations
    49                                  extern printf
    50                                  extern input_array
    51                                  extern output_array
    52                                  extern sum
    53                                  extern sort
    54                                  
    55                                  global manager
    56                                  
    57                                  segment .data                 ;Place initialized data here
    58 00000000 0A546869732070726F-     prompt_1 db 10,"This program will manage your arrays of 64-bit floats",0
    58 00000009 6772616D2077696C6C-
    58 00000012 206D616E6167652079-
    58 0000001B 6F7572206172726179-
    58 00000024 73206F662036342D62-
    58 0000002D 697420666C6F617473-
    58 00000036 00                 
    59 00000037 0A466F722074686520-     prompt_2 db 10,"For the array enter a sequence of 64-bit floats separated by white space.",10,0
    59 00000040 617272617920656E74-
    59 00000049 657220612073657175-
    59 00000052 656E6365206F662036-
    59 0000005B 342D62697420666C6F-
    59 00000064 617473207365706172-
    59 0000006D 617465642062792077-
    59 00000076 686974652073706163-
    59 0000007F 652E0A00           
    60 00000083 416674657220746865-     prompt_3 db "After the last input press enter followed by Control+D:",10,0
    60 0000008C 206C61737420696E70-
    60 00000095 757420707265737320-
    60 0000009E 656E74657220666F6C-
    60 000000A7 6C6F77656420627920-
    60 000000B0 436F6E74726F6C2B44-
    60 000000B9 3A0A00             
    61 000000BC 0A5468657365206E75-     prompt_4 db 10,"These numbers were received and placed into an array",10,0
    61 000000C5 6D6265727320776572-
    61 000000CE 652072656365697665-
    61 000000D7 6420616E6420706C61-
    61 000000E0 63656420696E746F20-
    61 000000E9 616E2061727261790A-
    61 000000F2 00                 
    62 000000F3 5468652073756D206F-     prompt_5 db "The sum of the inputted numbers is %.10f",10,0
    62 000000FC 662074686520696E70-
    62 00000105 7574746564206E756D-
    62 0000010E 626572732069732025-
    62 00000117 2E3130660A00       
    63 0000011D 546865206172697468-     prompt_6 db "The arithmetic mean of the numbers in the array is %.6f",10,0
    63 00000126 6D65746963206D6561-
    63 0000012F 6E206F662074686520-
    63 00000138 6E756D626572732069-
    63 00000141 6E2074686520617272-
    63 0000014A 617920697320252E36-
    63 00000153 660A00             
    64 00000156 546869732069732074-     prompt_7 db "This is the array after the sort process completed:",10,0
    64 0000015F 686520617272617920-
    64 00000168 616674657220746865-
    64 00000171 20736F72742070726F-
    64 0000017A 6365737320636F6D70-
    64 00000183 6C657465643A0A00   
    65 0000018B 0A256C660A00            floatformat db 10, "%lf", 10, 0
    66 00000191 0A25640A00              intformat db 10, "%d", 10, 0
    67                                  segment .bss      ;Declare pointers to un-initialized space in this segment.
    68                                  align 64
    69 00000000 <res 00000340>          backup resb 832
    70                                  
    71 00000340 <res 00000320>          array resq 100 ; <name> <data-type> <size>
    72                                  
    73                                  
    74                                  segment .text
    75                                  manager:
    76                                  
    77                                  ;backup GPRs
    78 00000000 55                      push rbp
    79 00000001 4889E5                  mov rbp, rsp
    80 00000004 53                      push rbx
    81 00000005 51                      push rcx
    82 00000006 52                      push rdx
    83 00000007 57                      push rdi
    84 00000008 56                      push rsi
    85 00000009 4150                    push r8
    86 0000000B 4151                    push r9
    87 0000000D 4152                    push r10
    88 0000000F 4153                    push r11
    89 00000011 4154                    push r12
    90 00000013 4155                    push r13
    91 00000015 4156                    push r14
    92 00000017 4157                    push r15
    93 00000019 9C                      pushf
    94                                  
    95                                  ;backup other registers
    96 0000001A B807000000              mov rax,7
    97 0000001F BA00000000              mov rdx,0
    98 00000024 0FAE2425[00000000]      xsave [backup]
    99                                  
   100                                  ;inform user what the program does/how it works in creating floating point number arrays
   101 0000002C B800000000              mov rax, 0
   102 00000031 48BF-                   mov rdi, prompt_1
   102 00000033 [0000000000000000] 
   103 0000003B E8(00000000)            call printf
   104                                  
   105                                  ;inform the user how to input float values into the array
   106 00000040 B800000000              mov rax, 0
   107 00000045 48BF-                   mov rdi, prompt_2
   107 00000047 [3700000000000000] 
   108 0000004F E8(00000000)            call printf
   109                                  
   110                                  ;inform user how to end the input prompt before the array is full
   111 00000054 B800000000              mov rax, 0
   112 00000059 48BF-                   mov rdi, prompt_3
   112 0000005B [8300000000000000] 
   113 00000063 E8(00000000)            call printf
   114                                  
   115                                  ;call input_array function in order to obtain the float values from user and place them into array
   116 00000068 B800000000              mov rax, 0
   117 0000006D 48BF-                   mov rdi, array
   117 0000006F [4003000000000000] 
   118 00000077 BE64000000              mov rsi, 100
   119 0000007C E8(00000000)            call input_array
   120                                  
   121                                  ;store the array length from input_array function in a non-volatile register to use for other functions
   122 00000081 4989C5                  mov r13, rax
   123                                  
   124                                  ;tell user that these were the values received before printing the array values
   125 00000084 B800000000              mov rax, 0
   126 00000089 48BF-                   mov rdi, prompt_4
   126 0000008B [BC00000000000000] 
   127 00000093 E8(00000000)            call printf
   128                                  
   129                                  ;call output_array function to loop through the array and print each value for the user to see
   130 00000098 B800000000              mov rax, 0
   131 0000009D 48BF-                   mov rdi, array
   131 0000009F [4003000000000000] 
   132 000000A7 4C89EE                  mov rsi, r13
   133 000000AA E8(00000000)            call output_array
   134                                  
   135                                  ;call sum function in order to calculate the sum of all the user submitted values in the array
   136 000000AF B800000000              mov rax, 0
   137 000000B4 48BF-                   mov rdi, array
   137 000000B6 [4003000000000000] 
   138 000000BE 4C89EE                  mov rsi, r13
   139 000000C1 E8(00000000)            call sum
   140                                  
   141                                  
   142 000000C6 F2440F10F8              movsd xmm15, xmm0   ; Move mean to xmm0 for returning to main
   143                                  
   144 000000CB B801000000              mov rax, 1
   145 000000D0 48BF-                   mov rdi, prompt_5
   145 000000D2 [F300000000000000] 
   146 000000DA F2410F10C7              movsd xmm0, xmm15   ; Moving sum into xmm0 to print
   147 000000DF E8(00000000)            call printf
   148                                  
   149 000000E4 4D89EE                  mov r14, r13
   150                                  ;calculate mean
   151 000000E7 F2490F2ACD              cvtsi2sd xmm1, r13
   152 000000EC F2410F10C7              movsd xmm0, xmm15
   153 000000F1 F20F5EC1                divsd xmm0, xmm1
   154                                  
   155 000000F5 4D89F5                  mov r13, r14
   156                                  
   157                                  ; Print the Mean
   158 000000F8 B801000000              mov rax, 1
   159 000000FD 48BF-                   mov rdi, prompt_6
   159 000000FF [1D01000000000000] 
   160 00000107 E8(00000000)            call printf
   161                                  
   162 0000010C B800000000              mov rax, 0
   163 00000111 48BF-                   mov rdi, prompt_7
   163 00000113 [5601000000000000] 
   164 0000011B E8(00000000)            call printf
   165                                  
   166                                  ; Sort the array in numerical order
   167 00000120 B800000000              mov rax, 0
   168 00000125 48BF-                   mov rdi, array
   168 00000127 [4003000000000000] 
   169 0000012F 4C89EE                  mov rsi, r13
   170 00000132 E8(00000000)            call sort
   171                                  
   172                                  ; Print out the sorted array
   173 00000137 B800000000              mov rax, 0
   174 0000013C 48BF-                   mov rdi, array
   174 0000013E [4003000000000000] 
   175 00000146 4C89EE                  mov rsi, r13
   176 00000149 E8(00000000)            call output_array
   177                                  
   178                                  ; Saving xmm15 (sum) 
   179 0000014E B800000000              mov rax, 0
   180 00000153 6A00                    push qword 0
   181 00000155 F2440F113C24            movsd [rsp], xmm15
   182                                  
   183 0000015B B807000000              mov rax, 7
   184 00000160 B800000000              mov rax, 0
   185 00000165 0FAE2C25[00000000]      xrstor [backup]
   186                                  
   187                                  ; Sending the sum to main
   188 0000016D F20F100424              movsd xmm0, [rsp]
   189 00000172 58                      pop rax
   190                                  
   191                                  ;Restore the GPRs
   192 00000173 9D                      popf
   193 00000174 415F                    pop r15
   194 00000176 415E                    pop r14
   195 00000178 415D                    pop r13
   196 0000017A 415C                    pop r12
   197 0000017C 415B                    pop r11
   198 0000017E 415A                    pop r10
   199 00000180 4159                    pop r9
   200 00000182 4158                    pop r8
   201 00000184 5E                      pop rsi
   202 00000185 5F                      pop rdi
   203 00000186 5A                      pop rdx
   204 00000187 59                      pop rcx
   205 00000188 5B                      pop rbx
   206 00000189 5D                      pop rbp   ;Restore rbp to the base of the activation record of the caller program
   207 0000018A C3                      ret
   208                                  ;End of the function manager ====================================================================
