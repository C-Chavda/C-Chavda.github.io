     1                                  ; *******************************************************************************************************************************
     2                                  ; Program name: "Arrays of Floating Point Numbers". This program takes user inputs of floating point numbers and places them into an array.
     3                                  ; Copyright (C) 2025  Jonathan Diep                                                                                             *
     4                                  ;                                                                                                                               *
     5                                  ; This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License    *
     6                                  ; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.        *
     7                                  ; This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty  *
     8                                  ; of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.                *
     9                                  ; You should have received a copy of the GNU General Public License along with this program. If not, see                       *
    10                                  ; <https://www.gnu.org/licenses/>.                                                                                             *
    11                                  ; *******************************************************************************************************************************
    12                                  
    13                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    14                                  ; Author information
    15                                  ;   Author name: Chandresh Chavda
    16                                  ;   Author email: chav349@csu.fullerton.edu
    17                                  ;   CWID: 885158899
    18                                  ;   Class: 240-11 Section 11
    19                                  ;
    20                                  ; Program information
    21                                  ;   Program name: Arrays of Floating Point Numbers
    22                                  ;   Programming language: X86-64 Assembly
    23                                  ;   Date program began: 2025-Feb-22
    24                                  ;   Date of last update: 2025-Feb-22
    25                                  ;   Files in this program: main.c, manager.asm, input_array.asm, output_array.asm, sum.asm, sort.asm, swap.asm, isfloat.asm, run.sh.
    26                                  ;   Testing: Alpha testing completed. All functions are correct.
    27                                  ;   Status: Ready for release to customers
    28                                  ;
    29                                  ; Purpose
    30                                  ;   This program takes user inputs of floating point numbers and places them into an array.
    31                                  ;   The output_array function is responsible for displaying the array values to the user in a properly formatted manner.
    32                                  ;
    33                                  ; This file:
    34                                  ;   File name: output_array.asm
    35                                  ;   Language: X86-64 Assembly
    36                                  ;   Max page width: 124 columns
    37                                  ;   Assemble (standard): nasm -f elf64 -l output_array.lis -o output_array.o output_array.asm
    38                                  ;   Assemble (debug): nasm -f elf64 -gdwarf -l output_array.lis -o output_array.o output_array.asm
    39                                  ;   Optimal print specification: Landscape, 7 points, monospace, 8Â½x11 paper
    40                                  ;   Prototype of this function: extern double output_array();
    41                                  ;
    42                                  ; Notes:
    43                                  ;   This file contains the assembly module for the "Arrays of Floating Point Numbers" program, specifically the output_array function.
    44                                  ;   The output_array function displays the array of floating point numbers to the user in a formatted manner, with a specified number of decimal places.
    45                                  ;
    46                                  ;===== Begin code area ==========================================================================================================
    47                                  
    48                                  extern printf
    49                                  
    50                                  section .data
    51 00000000 252E39662000                floatformat db "%.9f ", 0
    52 00000006 256400                      intformat db "%d", 0
    53 00000009 0A00                        newline db 10, 0
    54                                  
    55                                  section .bss
    56                                  ;empty
    57                                  section .text
    58                                  global output_array
    59                                  output_array:
    60 00000000 55                          push rbp
    61 00000001 4889E5                      mov rbp, rsp
    62 00000004 4154                        push r12
    63 00000006 4155                        push r13
    64 00000008 4156                        push r14
    65                                               ; Align stack
    66                                  
    67 0000000A 4989FC                      mov r12, rdi    ; array address
    68                                      ;mov r13, rax    ; array length
    69 0000000D 4989F5                      mov r13, rsi    ; index counter
    70                                      ;mov rax, r13
    71                                      ;mov rdi, floatformat
    72                                      ;call printf
    73 00000010 41BE00000000                mov r14, 0
    74                                  .print_loop:
    75 00000016 4D39EE                      cmp r14, r13    ; check if index < length
    76 00000019 7D27                        jge .end_loop
    77                                  
    78                                      ; Print current element
    79 0000001B 4883EC08                    sub rsp, 8
    80 0000001F 48BF-                       mov rdi, floatformat
    80 00000021 [0000000000000000] 
    81 00000029 F2430F1004F4                movsd xmm0, [r12 + r14*8]
    82 0000002F B801000000                  mov rax, 1
    83 00000034 E8(00000000)                call printf
    84 00000039 4883C408                    add rsp, 8
    85                                  
    86 0000003D 49FFC6                      inc r14
    87 00000040 EBD4                        jmp .print_loop
    88                                  
    89                                  .end_loop:
    90                                      ; Print newline
    91 00000042 B800000000                  mov rax, 0
    92 00000047 48BF-                       mov rdi, newline
    92 00000049 [0900000000000000] 
    93 00000051 E8(00000000)                call printf
    94                                  
    95 00000056 415E                        pop r14
    96 00000058 415D                        pop r13
    97 0000005A 415C                        pop r12
    98 0000005C 5D                          pop rbp
    99 0000005D C3                          ret
